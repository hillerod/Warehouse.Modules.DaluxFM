//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DaluxFMService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DaluxFMService.ExternalDataAccessServiceSoap")]
    public interface ExternalDataAccessServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRoomDataExtract2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DaluxFMService.CallResultOfXElement> GetRoomDataExtract2Async(string customerID, string APIKey, string authentication, int buildingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBuildingDataExtract2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetBuildingDataExtract2Async(string customerID, string APIKey, string authentication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetContactPersonsForBuilding", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SetContactPersonsForBuildingAsync(string customerId, string APIKey, string authentication, int BuildingMasterID, System.Xml.XmlElement ContactPersons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDrawingPrint", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDrawingPrintAsync(string customerID, string APIKey, string authentication, int buildingMasterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFullBuildingPartDataExtract2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetFullBuildingPartDataExtract2Async(string customerID, string APIKey, string authentication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPhotoById2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task GetPhotoById2Async(string customerID, string APIKey, string authentication, int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOpenTasks2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetOpenTasks2Async(string customerID, string APIKey, string authentication);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CallResultOfXElement
    {
        
        private bool isSuccessfulField;
        
        private string errorMessageField;
        
        private int errorCodeField;
        
        private System.Xml.XmlElement valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsSuccessful
        {
            get
            {
                return this.isSuccessfulField;
            }
            set
            {
                this.isSuccessfulField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ErrorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.Xml.XmlElement Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ExternalDataAccessServiceSoapChannel : DaluxFMService.ExternalDataAccessServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ExternalDataAccessServiceSoapClient : System.ServiceModel.ClientBase<DaluxFMService.ExternalDataAccessServiceSoap>, DaluxFMService.ExternalDataAccessServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ExternalDataAccessServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ExternalDataAccessServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ExternalDataAccessServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExternalDataAccessServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ExternalDataAccessServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExternalDataAccessServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ExternalDataAccessServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExternalDataAccessServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<DaluxFMService.CallResultOfXElement> GetRoomDataExtract2Async(string customerID, string APIKey, string authentication, int buildingID)
        {
            return base.Channel.GetRoomDataExtract2Async(customerID, APIKey, authentication, buildingID);
        }
        
        public System.Threading.Tasks.Task<string> GetBuildingDataExtract2Async(string customerID, string APIKey, string authentication)
        {
            return base.Channel.GetBuildingDataExtract2Async(customerID, APIKey, authentication);
        }
        
        public System.Threading.Tasks.Task<string> SetContactPersonsForBuildingAsync(string customerId, string APIKey, string authentication, int BuildingMasterID, System.Xml.XmlElement ContactPersons)
        {
            return base.Channel.SetContactPersonsForBuildingAsync(customerId, APIKey, authentication, BuildingMasterID, ContactPersons);
        }
        
        public System.Threading.Tasks.Task<string> GetDrawingPrintAsync(string customerID, string APIKey, string authentication, int buildingMasterID)
        {
            return base.Channel.GetDrawingPrintAsync(customerID, APIKey, authentication, buildingMasterID);
        }
        
        public System.Threading.Tasks.Task<string> GetFullBuildingPartDataExtract2Async(string customerID, string APIKey, string authentication)
        {
            return base.Channel.GetFullBuildingPartDataExtract2Async(customerID, APIKey, authentication);
        }
        
        public System.Threading.Tasks.Task GetPhotoById2Async(string customerID, string APIKey, string authentication, int photoId)
        {
            return base.Channel.GetPhotoById2Async(customerID, APIKey, authentication, photoId);
        }
        
        public System.Threading.Tasks.Task<string> GetOpenTasks2Async(string customerID, string APIKey, string authentication)
        {
            return base.Channel.GetOpenTasks2Async(customerID, APIKey, authentication);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ExternalDataAccessServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ExternalDataAccessServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ExternalDataAccessServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://fm-aws-api.dalux.com/Dalux.DaluxFm.Services_deploy/sharedservices/external" +
                        "dataaccessservice.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ExternalDataAccessServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://fm-aws-api.dalux.com/Dalux.DaluxFm.Services_deploy/sharedservices/external" +
                        "dataaccessservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ExternalDataAccessServiceSoap,
            
            ExternalDataAccessServiceSoap12,
        }
    }
}
